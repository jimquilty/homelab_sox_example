title 'SOX Compliance Examples'

control 'SOX-Control-001' do
  impact 1.0
  title 'Ensure \'Audit Credential Validation\' is set to \'Success and Failure\''
  desc 'This subcategory reports the results of validation tests on credentials submitted for a user account logon request. These events occur on the computer that is authoritative for the credentials. For domain accounts, the domain controller is authoritative, whereas for local accounts, the local computer is authoritative. In domain environments, most of the Account Logon events occur in the Security log of the domain controllers that are authoritative for the domain accounts. However, these events can occur on other computers in the organization when local accounts are used to log on. Events for this subcategory include:
  * 4774: An account was mapped for logon.
  * 4775: An account could not be mapped for logon.
  * 4776: The domain controller attempted to validate the credentials for an account.
  * 4777: The domain controller failed to validate the credentials for an account.
  The recommended state for this setting is: Success and Failure.'
  describe audit_policy do
    its('Credential Validation') { should eq 'Success and Failure' }
  end
end

control 'SOX-Control-002' do
  impact 1.0
  title 'Ensure \'Audit Application Group Management\' is set to \'Success and Failure\''
  desc 'This policy setting allows you to audit events generated by changes to application groups such as the following:
  * Application group is created, changed, or deleted.
  * Member is added or removed from an application group.
  Application groups are utilized by Windows Authorization Manager, which is a flexible framework created by Microsoft for integrating role-based access control (RBAC) into applications. More information on Windows Authorization Manager is available at [MSDN - Windows Authorization Manager](https://msdn.microsoft.com/en-us/library/bb897401.aspx).
  The recommended state for this setting is: Success and Failure.'
  describe audit_policy do
    its('Application Group Management') { should eq 'Success and Failure' }
  end
end

control 'SOX-Control-003' do
  impact 1.0
  title 'Ensure \'Audit Computer Account Management\' is set to \'Success and Failure\''
  desc 'This subcategory reports each event of computer account management, such as when a computer account is created, changed, deleted, renamed, disabled, or enabled. Events for this subcategory include:
  * 4741: A computer account was created.
  * 4742: A computer account was changed.
  * 4743: A computer account was deleted.
  The recommended state for this setting is: Success and Failure.'
  describe audit_policy do
    its('Computer Account Management') { should eq 'Success and Failure' }
  end
end

control 'SOX-Control-004' do
  impact 1.0
  title 'Ensure \'Enforce password history\' is set to \'12 or more password(s)\''
  desc 'This policy setting determines the number of renewed, unique passwords that have to be associated with a user account before you can reuse an old password. The value for this policy setting must be between 0 and 24 passwords. The default value for Windows Vista is 0 passwords, but the default setting in a domain is 24 passwords. To maintain the effectiveness of this policy setting, use the Minimum password age setting to prevent users from repeatedly changing their password.'
  describe security_policy do
    its('PasswordHistorySize') { should be >= 12 }
  end
end

control 'SOX-Control-005' do
  impact 1.0
  title 'Ensure \'Maximum password age\' is set to \'90 days\''
  desc 'This policy setting defines how long a user can use their password before it expires.
  Values for this policy setting range from 0 to 999 days. If you set the value to 0, the password will never expire.
  Because attackers can crack passwords, the more frequently you change the password the less opportunity an attacker has to use a cracked password. However, the lower this value is set, the higher the potential for an increase in calls to help desk support due to users having to change their password or forgetting which password is current.'
  describe security_policy do
    its('MaximumPasswordAge') { should be <= attribute('maximum_password_age') }
  end
  describe security_policy do
    its('MaximumPasswordAge') { should be >= 90 }
  end
end

control 'SOX-Control-006' do
  impact 1.0
  title 'Ensure \'Minimum password length\' is set to \'14 or more character(s)\''
  desc 'This policy setting determines the least number of characters that make up a password for a user account. There are many different theories about how to determine the best password length for an organization, but perhaps "pass phrase" is a better term than "password." In Microsoft Windows 2000 and newer, pass phrases can be quite long and can include spaces. Therefore, a phrase such as "I want to drink a $5 milkshake" is a valid pass phrase; it is a considerably stronger password than an 8 or 10 character string of random numbers and letters, and yet is easier to remember. Users must be educated about the proper selection and maintenance of passwords, especially with regard to password length. In enterprise environments, the ideal value for the Minimum password length setting is 14 characters, however you should adjust this value to meet your organization\'s business requirements.'
  describe security_policy do
    its('MinimumPasswordLength') { should be >= 14 }
  end
end

control 'SOX-Control-007' do
  impact 1.0
  title 'Ensure \'Password must meet complexity requirements\' is set to \'Enabled\''
  desc 'This policy setting checks all new passwords to ensure that they meet basic requirements for strong passwords.
  When this policy is enabled, passwords must meet the following minimum requirements: -- Not contain the user\'s account name or parts of the user\'s full name that exceed two consecutive characters
  -- Be at least six characters in length
  -- Contain characters from three of the following four categories:
  ---- English uppercase characters (A through Z)
  ---- English lowercase characters (a through z)
  ---- Base 10 digits (0 through 9)
  ---- Non-alphabetic characters (for example, !, $, #, %)
  ---- A catch-all category of any Unicode character that does not fall under the previous four categories. This fifth category can be regionally specific.
  Each additional character in a password increases its complexity exponentially. For instance, a seven-character, all lower-case alphabetic password would have 267 (approximately 8 x 109 or 8 billion) possible combinations. At 1,000,000 attempts per second (a capability of many password-cracking utilities), it would only take 133 minutes to crack. A seven-character alphabetic password with case sensitivity has 527 combinations. A seven-character case-sensitive alphanumeric password without punctuation has 627 combinations. An eight-character password has 268 (or 2 x 1011) possible combinations. Although this might seem to be a large number, at 1,000,000 attempts per second it would take only 59 hours to try all possible passwords. Remember, these times will significantly increase for passwords that use ALT characters and other special keyboard characters such as "!" or "@". Proper use of the password settings can help make it difficult to mount a brute force attack.'
  describe security_policy do
    its('PasswordComplexity') { should eq 1 }
  end
end

